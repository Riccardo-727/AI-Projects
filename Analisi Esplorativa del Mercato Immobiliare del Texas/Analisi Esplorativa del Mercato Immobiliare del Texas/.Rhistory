quantile(sort(sales))[c(1, 5)]
mean(sales)
valori = seq(min(sales), max(sales), (max(sales)-min(sales))/10 ) + (((max(sales)-min(sales))/10) /2)
valori = valori[-11]
pesi = sales_distr_freq["ni"][[1]]
weighted.mean(valori, pesi)
volume_div_classi = cut(volume, seq(min(volume), max(volume), (max(volume)-min(volume))/10 ))
ni = table(volume_div_classi)
fi = table(volume_div_classi) / length(volume)
Ni = cumsum(table(volume_div_classi))
Fi = cumsum(table(volume_div_classi)) / length(volume)
volume_distr_freq = as.data.frame( cbind( ni, fi, Ni, Fi))
table(volume_div_classi)
max(table(volume_div_classi))  #1° metodo
max(volume_distr_freq["ni"])  #2° metodo
median(sort(volume))   #1° metodo
x = volume_distr_freq["Fi"][[1]]     #2° metodo
index = which(x >= 0.50)[1]
rownames(volume_distr_freq)[index]
quantile(sort(volume))[c(1, 5)]
mean(volume)
valori = seq(min(volume), max(volume), (max(volume)-min(volume))/10 ) + (((max(volume)-min(volume))/10) /2)
valori = valori[-11]
pesi = volume_distr_freq["ni"][[1]]
weighted.mean(valori, pesi)
median_price_div_classi = cut(median_price, seq(min(median_price), max(median_price), (max(median_price)-min(median_price))/10 ))
ni = table(median_price_div_classi)
fi = table(median_price_div_classi) / length(median_price)
Ni = cumsum(table(median_price_div_classi))
Fi = cumsum(table(median_price_div_classi)) / length(median_price)
median_price_distr_freq = as.data.frame( cbind( ni, fi, Ni, Fi))
table(median_price_div_classi)
max(table(median_price_div_classi))  #1° metodo
max(median_price_distr_freq["ni"])  #2° metodo
median(sort(median_price))   #1° metodo
x = median_price_distr_freq["Fi"][[1]]     #2° metodo
index = which(x >= 0.50)[1]
rownames(median_price_distr_freq)[index]
quantile(sort(median_price))[c(1, 5)]
mean(median_price)
valori = seq(min(median_price), max(median_price), (max(median_price)-min(median_price))/10 ) + (((max(median_price)-min(median_price))/10) /2)
valori = valori[-11]
pesi = median_price_distr_freq["ni"][[1]]
media_ponderata = weighted.mean(valori, pesi)
listings_div_classi = cut(listings, seq(min(listings), max(listings), (max(listings)-min(listings))/10 ))
ni = table(listings_div_classi)
fi = table(listings_div_classi) / length(listings)
Ni = cumsum(table(listings_div_classi))
Fi = cumsum(table(listings_div_classi)) / length(listings)
listings_distr_freq = as.data.frame( cbind( ni, fi, Ni, Fi))
table(listings_div_classi)
max(table(listings_div_classi))  #1° metodo
max(listings_distr_freq["ni"])  #2° metodo
median(sort(listings))   #1° metodo
x = listings_distr_freq["Fi"][[1]]     #2° metodo
index = which(x >= 0.50)[1]
rownames(listings_distr_freq)[index]
quantile(sort(listings))[c(1, 5)]
mean(listings)
valori = seq(min(listings), max(listings), (max(listings)-min(listings))/10 ) + (((max(listings)-min(listings))/10) /2)
valori = valori[-11]
pesi = listings_distr_freq["ni"][[1]]
media_ponderata = weighted.mean(valori, pesi)
months_inventory_div_classi = cut(months_inventory, seq(min(months_inventory), max(months_inventory), (max(months_inventory)-min(months_inventory))/10 ))
ni = table(months_inventory_div_classi)
fi = table(months_inventory_div_classi) / length(months_inventory)
Ni = cumsum(table(months_inventory_div_classi))
Fi = cumsum(table(months_inventory_div_classi)) / length(months_inventory)
months_inventory_distr_freq = as.data.frame( cbind( ni, fi, Ni, Fi))
table(months_inventory_div_classi)
max(table(months_inventory_div_classi))  #1° metodo
max(months_inventory_distr_freq["ni"])  #2° metodo
median(sort(months_inventory))   #1° metodo
x = months_inventory_distr_freq["Fi"][[1]]     #2° metodo
index = which(x >= 0.50)[1]
rownames(months_inventory_distr_freq)[index]
quantile(sort(months_inventory))[c(1, 5)]
mean(months_inventory)
valori = seq(min(months_inventory), max(months_inventory), (max(months_inventory)-min(months_inventory))/10 ) + (((max(months_inventory)-min(months_inventory))/10) /2)
valori = valori[-11]
pesi = months_inventory_distr_freq["ni"][[1]]
media_ponderata = weighted.mean(valori, pesi)
gini_city = indice_gini(city, tipo_variabile="qualitativa")
gini_city
gini_year = indice_gini(year, tipo_variabile="qualitativa")
gini_year
gini_month = indice_gini(month, tipo_variabile="qualitativa")
gini_month
indici_di_variabilità("sales", sales)
indici_di_variabilità("volume", volume)
indici_di_variabilità("median_price", median_price)
indici_di_variabilità("listings", listings)
indici_di_variabilità("months_inventory", months_inventory)
library(moments)
indici_di_forma("sales", sales)
skewness(sales)
kurtosis(sales) - 3
indici_di_forma("volume", volume)
indici_di_forma("median_price", median_price)
indici_di_forma("listings", listings)
indici_di_forma("months_inventory", months_inventory)
distribuzione_frequenze_volume = get_distribuzione_frequenze(volume)
barplot(distribuzione_frequenze_volume$ni,
xlab = "volume, in milioni di dollari",
ylab = "Frequenze assolute",
names.arg = rownames(distribuzione_frequenze_volume),
# cex.axis = 0.8,   -> riduzione font per labelasse y
# cex.lab = 0.8,    -> riduzione font per per label asse x
cex.names = 0.7,  # -> riduzione font per per descrizione classi
xlim = c(0,12),
ylim = c(0,50),
col="blue")
gini_city = indice_gini(city, tipo_variabile="qualitativa")
gini_city
prob_beaumont = table(city)["Beaumont"] / length(city)
prob_beaumont
prob_luglio = table(month)[7] / length(month)
prob_luglio
prob_dic_2012 = sum( RealEstateTexax_Dataframe[["month"]] == "12" & RealEstateTexax_Dataframe[["year"]] == 2012 ) / nrow(RealEstateTexax_Dataframe)
prob_dic_2012  # 0.01666667
RealEstateTexax_Dataframe["mean_price"] = volume/sales*1000000
RealEstateTexax_Dataframe["conversion_coefficient"] = sales/listings*100
coefficiente_conversione = RealEstateTexax_Dataframe$conversion_coefficient
mean_coefficiente_conversione = mean(coefficiente_conversione)
std_coefficiente_conversione = sd(coefficiente_conversione)
mean_coefficiente_conversione
std_coefficiente_conversione
library(dplyr)
dati_raggruppati1 <- RealEstateTexax_Dataframe[ c("month", "conversion_coefficient")] %>%
group_by(month) %>%
summarise(media_conversione1 = mean(conversion_coefficient, na.rm = TRUE))
dati_raggruppati2 <- RealEstateTexax_Dataframe[ c("year", "conversion_coefficient")] %>%
group_by(year) %>%
summarise(media_conversione2 = mean(conversion_coefficient, na.rm = TRUE))
model <- lm(sales ~ coefficiente_conversione, data = RealEstateTexax_Dataframe)
summary(model)
totale_venduto_città <- RealEstateTexax_Dataframe %>%
group_by(city) %>%
summarise(media_fatturato = mean(volume, na.rm = TRUE))
totale_venduto_città
#utilizzo la proprietà associativa del prodotto in modo tale da poter gestire vettori grandi, con numeri grandi
geometric_mean = function(vettore){
prod(vettore^(1/length(vettore)))
}
armonic_mean = function(vettore){
length(vettore)/(sum(1/vettore))
}
indice_gini = function(vettore, num_classi = 10, tipo_variabile="quantitativa"){
if( tipo_variabile == "quantitativa")
{
distr_classi = get_distribuzione_frequenze(vettore, num_classi)
fi = distr_classi[["fi"]]
G = 1 - sum(fi^2)
j = num_classi
}
else if(tipo_variabile == "qualitativa")
{
fi = table(vettore) / length(vettore)
G = 1 - sum(fi^2)
j = length(table(vettore))
}
else
{
return()
}
gini = G/((j-1)/j)
return(gini)
}
indice_asimmetria = function(vettore){
skewness_partial = sum( (vettore-mean(vettore))^3 ) / length(vettore)
dev_std = sd(vettore)
skewness =  skewness_partial / dev_std^3
}
indice_curtosi = function(vettore){
curtosi_partial = sum( (vettore-mean(vettore))^4 ) / length(vettore)
dev_std = sd(vettore)
curtosi =  (curtosi_partial / dev_std^4 ) - 3
}
get_distribuzione_frequenze = function(vettore, num_classi=10){
vettore_div_classi = cut(vettore, seq(min(vettore), max(vettore), (max(vettore)-min(vettore))/num_classi ))
ni = table(vettore_div_classi)
fi = table(vettore_div_classi) / length(vettore)
Ni = cumsum(table(vettore_div_classi))
Fi = cumsum(table(vettore_div_classi)) / length(vettore)
#distribuzione in frequenza di months_inventory
vettore_distr_freq = as.data.frame( cbind( ni, fi, Ni, Fi))
return(vettore_distr_freq)
}
indici_di_variabilità = function(name, value){
#range
min_max = quantile(sort(value))[c(1, 5)]
print("**RANGE**")
print(sprintf("il range per la variabile '%s' è: %s ", name, min_max[2] - min_max[1] ))
cat("\n")
#range interquartile
iqr = IQR(value)
print("**RANGE INTERQUARTILE**")
print(sprintf("il range interquartile per la variabile '%s' è: %s ", name, iqr ))
cat("\n")
#varianza
varianza = var(value)
print("**VARIANZA**")
print(sprintf("la variazna per la variabile '%s' è: %s ", name, varianza ))
cat("\n")
#deviazione standard
dev_std = sd(value)
print("**DEVIAZIONE STANDARD**")
print(sprintf("la deviazione standard per la variabile '%s' è: %s ", name, dev_std ))
cat("\n")
#coefficiente di variazione
coeff_var = dev_std/mean(value)*100
print("**COEFFICIENTE DI VARIAZIONE**")
print(sprintf("il coefficiente di variazione per la variabile '%s' è: %s ", name, coeff_var ))
cat("\n")
#indice di gini
gini = indice_gini(value, 10)
print("**INDICE DI GINI**")
print(sprintf("l' indice di GINI per la variabile '%s' è: %s ", name, gini ))
cat("\n")
## return(list(min_max[2]-min_max[1], iqr, varianza, dev_std, coeff_var, gini)
}
indici_di_forma = function(name, value){
#asimmetria
skew = indice_asimmetria(value)
print("**ASIMMETRIA**")
print(sprintf("l'indice di asimmetria per la variabile %s è: %s ", name, skew))
cat("\n")
#curtosi
kurt = indice_curtosi(value)
print("**CURTOSI**")
print(sprintf("l'indice di curtosi per la variabile %s è: %s ", name, kurt))
cat("\n")
}
#utilizzo la proprietà associativa del prodotto in modo tale da poter gestire vettori grandi, con numeri grandi
geometric_mean = function(vettore){
prod(vettore^(1/length(vettore)))
}
armonic_mean = function(vettore){
length(vettore)/(sum(1/vettore))
}
indice_gini = function(vettore, num_classi = 10, tipo_variabile="quantitativa"){
if( tipo_variabile == "quantitativa")
{
distr_classi = get_distribuzione_frequenze(vettore, num_classi)
fi = distr_classi[["fi"]]
G = 1 - sum(fi^2)
j = num_classi
}
else if(tipo_variabile == "qualitativa")
{
fi = table(vettore) / length(vettore)
G = 1 - sum(fi^2)
j = length(table(vettore))
}
else
{
return()
}
gini = G/((j-1)/j)
return(gini)
}
indice_asimmetria = function(vettore){
skewness_partial = sum( (vettore-mean(vettore))^3 ) / length(vettore)
dev_std = sd(vettore)
skewness =  skewness_partial / dev_std^3
}
indice_curtosi = function(vettore){
curtosi_partial = sum( (vettore-mean(vettore))^4 ) / length(vettore)
dev_std = sd(vettore)
curtosi =  (curtosi_partial / dev_std^4 ) - 3
}
get_distribuzione_frequenze = function(vettore, num_classi=10){
vettore_div_classi = cut(vettore, seq(min(vettore), max(vettore), (max(vettore)-min(vettore))/num_classi ))
ni = table(vettore_div_classi)
fi = table(vettore_div_classi) / length(vettore)
Ni = cumsum(table(vettore_div_classi))
Fi = cumsum(table(vettore_div_classi)) / length(vettore)
#distribuzione in frequenza di months_inventory
vettore_distr_freq = as.data.frame( cbind( ni, fi, Ni, Fi))
return(vettore_distr_freq)
}
indici_di_variabilità = function(name, value){
#range
min_max = quantile(sort(value))[c(1, 5)]
print("**RANGE**")
print(sprintf("il range per la variabile '%s' è: %s ", name, min_max[2] - min_max[1] ))
cat("\n")
#range interquartile
iqr = IQR(value)
print("**RANGE INTERQUARTILE**")
print(sprintf("il range interquartile per la variabile '%s' è: %s ", name, iqr ))
cat("\n")
#varianza
varianza = var(value)
print("**VARIANZA**")
print(sprintf("la variazna per la variabile '%s' è: %s ", name, varianza ))
cat("\n")
#deviazione standard
dev_std = sd(value)
print("**DEVIAZIONE STANDARD**")
print(sprintf("la deviazione standard per la variabile '%s' è: %s ", name, dev_std ))
cat("\n")
#coefficiente di variazione
coeff_var = dev_std/mean(value)*100
print("**COEFFICIENTE DI VARIAZIONE**")
print(sprintf("il coefficiente di variazione per la variabile '%s' è: %s ", name, coeff_var ))
cat("\n")
#indice di gini
gini = indice_gini(value, 10)
print("**INDICE DI GINI**")
print(sprintf("l' indice di GINI per la variabile '%s' è: %s ", name, gini ))
cat("\n")
## return(list(min_max[2]-min_max[1], iqr, varianza, dev_std, coeff_var, gini)
}
indici_di_forma = function(name, value){
#asimmetria
skew = indice_asimmetria(value)
print("**ASIMMETRIA**")
print(sprintf("l'indice di asimmetria per la variabile %s è: %s ", name, skew))
cat("\n")
#curtosi
kurt = indice_curtosi(value)
print("**CURTOSI**")
print(sprintf("l'indice di curtosi per la variabile %s è: %s ", name, kurt))
cat("\n")
}
#install.packages("moments")
#install.packages("psych")
#install.packages("dplyr")
#tinytex::install_tinytex()
RealEstateTexax_Dataframe = read.csv("Real Estate Texas.csv")
attach(RealEstateTexax_Dataframe)
class(city) #qualitativa nominale
class(year) #qualitativa ordinale
class(month) #qualitativa ordinale
class(sales) #quantitativa discreta, scala rapporti
class(volume) #quantitativa continua, scala rapporti
class(median_price) #quantitativa continua, scala rapporti
class(listings) #quantitativa discreta, scala rapporti
class(months_inventory) #quantitavia discreta, scala rapporti
table(city)
max(table(city))
table(year)
max(table(year))
table(month)
max(table(month))
sales_div_classi = cut(sales, seq(min(sales), max(sales), (max(sales)-min(sales))/10 ))
ni = table(sales_div_classi)
fi = table(sales_div_classi) / length(sales)
Ni = cumsum(table(sales_div_classi))
Fi = cumsum(table(sales_div_classi)) / length(sales)
sales_distr_freq = as.data.frame( cbind( ni, fi, Ni, Fi))
table(sales_div_classi)
max(table(sales_div_classi))  #1° metodo
max(sales_distr_freq["ni"])  #2° metodo
median(sort(sales))   #1° metodo
x = sales_distr_freq["Fi"][[1]]     #2° metodo
index = which(x >= 0.50)[1]
rownames(sales_distr_freq)[index]
quantile(sort(sales))[c(1, 5)]
mean(sales)
valori = seq(min(sales), max(sales), (max(sales)-min(sales))/10 ) + (((max(sales)-min(sales))/10) /2)
valori = valori[-11]
pesi = sales_distr_freq["ni"][[1]]
weighted.mean(valori, pesi)
volume_div_classi = cut(volume, seq(min(volume), max(volume), (max(volume)-min(volume))/10 ))
ni = table(volume_div_classi)
fi = table(volume_div_classi) / length(volume)
Ni = cumsum(table(volume_div_classi))
Fi = cumsum(table(volume_div_classi)) / length(volume)
volume_distr_freq = as.data.frame( cbind( ni, fi, Ni, Fi))
table(volume_div_classi)
max(table(volume_div_classi))  #1° metodo
max(volume_distr_freq["ni"])  #2° metodo
median(sort(volume))   #1° metodo
x = volume_distr_freq["Fi"][[1]]     #2° metodo
index = which(x >= 0.50)[1]
rownames(volume_distr_freq)[index]
quantile(sort(volume))[c(1, 5)]
mean(volume)
valori = seq(min(volume), max(volume), (max(volume)-min(volume))/10 ) + (((max(volume)-min(volume))/10) /2)
valori = valori[-11]
pesi = volume_distr_freq["ni"][[1]]
weighted.mean(valori, pesi)
median_price_div_classi = cut(median_price, seq(min(median_price), max(median_price), (max(median_price)-min(median_price))/10 ))
ni = table(median_price_div_classi)
fi = table(median_price_div_classi) / length(median_price)
Ni = cumsum(table(median_price_div_classi))
Fi = cumsum(table(median_price_div_classi)) / length(median_price)
median_price_distr_freq = as.data.frame( cbind( ni, fi, Ni, Fi))
table(median_price_div_classi)
max(table(median_price_div_classi))  #1° metodo
max(median_price_distr_freq["ni"])  #2° metodo
median(sort(median_price))   #1° metodo
x = median_price_distr_freq["Fi"][[1]]     #2° metodo
index = which(x >= 0.50)[1]
rownames(median_price_distr_freq)[index]
quantile(sort(median_price))[c(1, 5)]
mean(median_price)
valori = seq(min(median_price), max(median_price), (max(median_price)-min(median_price))/10 ) + (((max(median_price)-min(median_price))/10) /2)
valori = valori[-11]
pesi = median_price_distr_freq["ni"][[1]]
media_ponderata = weighted.mean(valori, pesi)
listings_div_classi = cut(listings, seq(min(listings), max(listings), (max(listings)-min(listings))/10 ))
ni = table(listings_div_classi)
fi = table(listings_div_classi) / length(listings)
Ni = cumsum(table(listings_div_classi))
Fi = cumsum(table(listings_div_classi)) / length(listings)
listings_distr_freq = as.data.frame( cbind( ni, fi, Ni, Fi))
table(listings_div_classi)
max(table(listings_div_classi))  #1° metodo
max(listings_distr_freq["ni"])  #2° metodo
median(sort(listings))   #1° metodo
x = listings_distr_freq["Fi"][[1]]     #2° metodo
index = which(x >= 0.50)[1]
rownames(listings_distr_freq)[index]
quantile(sort(listings))[c(1, 5)]
mean(listings)
valori = seq(min(listings), max(listings), (max(listings)-min(listings))/10 ) + (((max(listings)-min(listings))/10) /2)
valori = valori[-11]
pesi = listings_distr_freq["ni"][[1]]
media_ponderata = weighted.mean(valori, pesi)
months_inventory_div_classi = cut(months_inventory, seq(min(months_inventory), max(months_inventory), (max(months_inventory)-min(months_inventory))/10 ))
ni = table(months_inventory_div_classi)
fi = table(months_inventory_div_classi) / length(months_inventory)
Ni = cumsum(table(months_inventory_div_classi))
Fi = cumsum(table(months_inventory_div_classi)) / length(months_inventory)
months_inventory_distr_freq = as.data.frame( cbind( ni, fi, Ni, Fi))
table(months_inventory_div_classi)
max(table(months_inventory_div_classi))  #1° metodo
max(months_inventory_distr_freq["ni"])  #2° metodo
median(sort(months_inventory))   #1° metodo
x = months_inventory_distr_freq["Fi"][[1]]     #2° metodo
index = which(x >= 0.50)[1]
rownames(months_inventory_distr_freq)[index]
quantile(sort(months_inventory))[c(1, 5)]
mean(months_inventory)
valori = seq(min(months_inventory), max(months_inventory), (max(months_inventory)-min(months_inventory))/10 ) + (((max(months_inventory)-min(months_inventory))/10) /2)
valori = valori[-11]
pesi = months_inventory_distr_freq["ni"][[1]]
media_ponderata = weighted.mean(valori, pesi)
gini_city = indice_gini(city, tipo_variabile="qualitativa")
gini_city
gini_year = indice_gini(year, tipo_variabile="qualitativa")
gini_year
gini_month = indice_gini(month, tipo_variabile="qualitativa")
gini_month
indici_di_variabilità("sales", sales)
indici_di_variabilità("volume", volume)
indici_di_variabilità("median_price", median_price)
indici_di_variabilità("listings", listings)
indici_di_variabilità("months_inventory", months_inventory)
library(moments)
indici_di_forma("sales", sales)
skewness(sales)
kurtosis(sales) - 3
indici_di_forma("volume", volume)
indici_di_forma("median_price", median_price)
indici_di_forma("listings", listings)
indici_di_forma("months_inventory", months_inventory)
distribuzione_frequenze_volume = get_distribuzione_frequenze(volume)
barplot(distribuzione_frequenze_volume$ni,
xlab = "volume, in milioni di dollari",
ylab = "Frequenze assolute",
names.arg = rownames(distribuzione_frequenze_volume),
# cex.axis = 0.8,   -> riduzione font per labelasse y
# cex.lab = 0.8,    -> riduzione font per per label asse x
cex.names = 0.7,  # -> riduzione font per per descrizione classi
xlim = c(0,12),
ylim = c(0,50),
col="blue")
gini_city = indice_gini(city, tipo_variabile="qualitativa")
gini_city
prob_beaumont = table(city)["Beaumont"] / length(city)
prob_beaumont
prob_luglio = table(month)[7] / length(month)
prob_luglio
prob_dic_2012 = sum( RealEstateTexax_Dataframe[["month"]] == "12" & RealEstateTexax_Dataframe[["year"]] == 2012 ) / nrow(RealEstateTexax_Dataframe)
prob_dic_2012  # 0.01666667
RealEstateTexax_Dataframe["mean_price"] = volume/sales*1000000
RealEstateTexax_Dataframe["conversion_coefficient"] = sales/listings*100
coefficiente_conversione = RealEstateTexax_Dataframe$conversion_coefficient
mean_coefficiente_conversione = mean(coefficiente_conversione)
std_coefficiente_conversione = sd(coefficiente_conversione)
mean_coefficiente_conversione
std_coefficiente_conversione
library(dplyr)
dati_raggruppati1 <- RealEstateTexax_Dataframe[ c("month", "conversion_coefficient")] %>%
group_by(month) %>%
summarise(media_conversione1 = mean(conversion_coefficient, na.rm = TRUE))
dati_raggruppati2 <- RealEstateTexax_Dataframe[ c("year", "conversion_coefficient")] %>%
group_by(year) %>%
summarise(media_conversione2 = mean(conversion_coefficient, na.rm = TRUE))
model <- lm(sales ~ coefficiente_conversione, data = RealEstateTexax_Dataframe)
summary(model)
totale_venduto_città <- RealEstateTexax_Dataframe %>%
group_by(city) %>%
summarise(media_fatturato = mean(volume, na.rm = TRUE))
totale_venduto_città
library(utils)
#install.packages("moments")
#install.packages("psych")
#install.packages("dplyr")
source("percorso/del/tuo/script.R")
#install.packages("moments")
#install.packages("psych")
#install.packages("dplyr")
source("Utils.R")
#install.packages("moments")
#install.packages("psych")
#install.packages("dplyr")
source("Utils.R")
