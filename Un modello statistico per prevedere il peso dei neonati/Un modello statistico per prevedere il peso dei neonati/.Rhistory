legend("topright", legend = c("Densità Peso", "Media Peso", "Densità Normale"),
col = c("blue", "green", "brown"), lty = 1:1, cex = 0.8)
t.test(Peso, mu=3300, conf.level = 0.95, alternative = "two.sided")
t.test(Lunghezza, mu=500, conf.level = 0.95, alternative = "two.sided")
boxplot(Peso ~ Sesso, col="lightblue")
title(main = "Variabile Peso in funzione del sesso", cex.main = 1.5)
shapiro.test(Peso[Sesso=="M"])
shapiro.test(Peso[Sesso=="F"])
wilcox.test(Peso[Sesso=="M"], Peso[Sesso=="F"])
plot(density(Peso[Sesso=="M"]), main = "Distribuzione in funzione del sesso", xlab = "Peso", ylim = c(0, 12e-4),  col = "blue")
abline(v = mean(Peso[Sesso=="M"]), col = "blue")
lines(density(Peso[Sesso=="F"]), col = "brown")
abline(v = mean(Peso[Sesso=="F"]), col = "brown")
legend("topleft", legend = c("Distribuzione Peso Maschi", "Media Peso Maschi", "Distribuzione Peso Femmine", "Media Peso Femmine"),
col = c("blue", "blue", "brown", "brown"), lty = 1:1, cex = 0.8)
boxplot(Lunghezza ~ Sesso, col="lightblue")
title(main = "Variabile Lunghezza in funzione del sesso", cex.main = 1.5)
shapiro.test(Lunghezza[Sesso=="M"])
shapiro.test(Lunghezza[Sesso=="F"])
wilcox.test(Lunghezza[Sesso=="M"], Lunghezza[Sesso=="F"])
plot(density(Lunghezza[Sesso=="M"]), main = "Distribuzione in funzione del sesso", xlab = "Lunghezza", ylim = c(0, 0.025),  col = "blue")
abline(v = mean(Lunghezza[Sesso=="M"]), col = "blue")
lines(density(Lunghezza[Sesso=="F"]), col = "brown")
abline(v = mean(Lunghezza[Sesso=="F"]), col = "brown")
legend("topleft", legend = c("Distribuzione Lunghezza Maschi", "Media Lunghezza Maschi", "Distribuzione Lunghezza Femmine", "Media Lunghezza Femmine"),
col = c("blue", "blue", "brown", "brown"), lty = 1:1, cex = 0.8)
ggplot(data = df)+
geom_bar(
aes(x=Ospedale, fill = Tipo.parto),
position = "dodge",
sta = "count",
color = "black")+
labs(x="Ospedali",
y="Frequenze assolute")+
theme_bw()+
scale_y_continuous(breaks = seq(0,1500,100))
tab_contingenza = table(Tipo.parto, Ospedale)["Ces", ]
tab_contingenza
chisq.test(tab_contingenza)
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
mapping_numerico = c("Nat" = 1, "Ces" = 2)
df$Tipo.parto = as.numeric(factor(Tipo.parto, levels = names(mapping_numerico), labels = mapping_numerico))
mapping_numerico2 = c("osp1" = 1, "osp2" = 2, "osp3" = 3)
df$Ospedale = as.numeric(factor(Ospedale, levels = names(mapping_numerico2), labels = mapping_numerico2))
mapping_numerico3 = c("M" = 1, "F" = 2)
df["Sesso"] = as.numeric(factor(Sesso, levels = names(mapping_numerico3), labels = mapping_numerico3))
attach(df)
pairs(df, upper.panel = panel.smooth, lower.panel = panel.cor)
par(mfrow = c(1,2))
boxplot(Peso~Fumatrici, xlab = "Relazione peso-fumatrici", col="lightblue")
boxplot(Peso~Tipo.parto, xlab = "Relazione peso-tipo parto", col="lightblue")
wilcox.test(Peso[Fumatrici=="0"], Peso[Fumatrici=="1"], mu=0)
wilcox.test(Peso[Tipo.parto=="1"], Peso[Tipo.parto=="2"], mu=0)
df = read.csv("neonati.csv")
df = df[-27,]
df = df[-73,]
df = df[-516,]
df = df[-812,]
df = df[-1111,]
df = df[-1315,]
df = df[-1717,]
df = df[-1899,]
df = df[-2301,]
df = df[-2400,]
attach(df)
modello_1 = lm(Peso ~ ., data=df)
summary(modello_1)
vif(modello_1)
modello_2 = lm(Peso ~ . -Anni.madre -Fumatrici -Ospedale, data=df)
summary(modello_2)
BIC(modello_1, modello_2)
anova(modello_1, modello_2)
modello_3 = update(modello_2, ~. -Tipo.parto)
summary(modello_3)
anova(modello_2, modello_3)
BIC(modello_2, modello_3)
n = nrow(df)
step_wiseAIC = MASS::stepAIC(modello_1, direction = "both", k=log(n))
summary(step_wiseAIC)
BIC(step_wiseAIC, modello_3)
modello_4_1 = update(modello_3, ~. + I(Gestazione^2))
modello_4_2 = update(modello_3, ~. + I(Lunghezza^2))
modello_4_3 = update(modello_3, ~. + I(Cranio^2))
modello_4_4 = update(modello_3, ~. + I(N.gravidanze^2))
BIC(modello_4_1)
BIC(modello_4_2)
BIC(modello_4_3)
BIC(modello_4_4)
modello_5_1 = update(modello_3, ~. + Gestazione*Cranio )
modello_5_2 = update(modello_3, ~. + Lunghezza*Gestazione )
modello_5_3 = update(modello_3, ~. + Lunghezza*Cranio )
BIC(modello_5_1)
BIC(modello_5_2)
BIC(modello_5_3)
par(mfrow=c(2,2))
plot(modello_3)
#distanza di cook
cook<-cooks.distance(modello_3)
max(cook)
which.max(cook)
plot(cook,ylim = c(0,1))
df_no_out = df[-1551,]
modello_3_no_out = lm(Peso ~ . -Anni.madre -Fumatrici -Ospedale -Tipo.parto, data=df_no_out)
shapiro.test(residuals(modello_3_no_out))
bptest(modello_3_no_out)
dwtest(modello_3_no_out)
plot(density(residuals(modello_3_no_out)), main="Densità residui modello_3_no_out")
plot(residuals(modello_3_no_out))
title(main = "Residui modello_3_no_out", cex.main = 1.5)
par(mfrow=c(2,2))
plot(modello_4_2)
#distanza di cook
cook<-cooks.distance(modello_4_2)
max(cook)
which.max(cook)
plot(cook,ylim = c(0,1))
shapiro.test(residuals(modello_4_2))
bptest(modello_4_2)
dwtest(modello_4_2)
plot(density(residuals(modello_4_2)), main="Densità residui modello_4_2")
plot(residuals(modello_4_2))
title(main="Residui modello_4_2")
summary(modello_3_no_out)$r.squared
summary(modello_4_2)$r.squared
BIC(modello_3_no_out)
BIC(modello_4_2)
df_test = read.csv("neonati.csv")
p31 = predict(modello_3_no_out, df_test[27,])
p41 = predict(modello_4_2, df_test[27,])
p32 = predict(modello_3_no_out, df_test[73,])
p42 = predict(modello_4_2, df_test[73,])
p33 = predict(modello_3_no_out, df_test[516,])
p43 = predict(modello_4_2, df_test[516,])
p34 = predict(modello_3_no_out, df_test[812,])
p44 = predict(modello_4_2, df_test[812,])
p35 = predict(modello_3_no_out, df_test[1111,])
p45 = predict(modello_4_2, df_test[1111,])
p36 = predict(modello_3_no_out, df_test[1315,])
p46 = predict(modello_4_2, df_test[1315,])
p37 = predict(modello_3_no_out, df_test[1717,])
p47 = predict(modello_4_2, df_test[1717,])
p38 = predict(modello_3_no_out, df_test[1899,])
p48 = predict(modello_4_2, df_test[1899,])
p39 = predict(modello_3_no_out, df_test[2301,])
p49 = predict(modello_4_2, df_test[2301,])
p310 = predict(modello_3_no_out, df_test[2400,])
p410 = predict(modello_4_2, df_test[2400,])
v1 = c(p31, p32, p33, p34, p35, p36, p37, p38, p39, p310)
v2 = c(p41, p42, p43, p44, p45, p46, p47, p48, p49, p410)
mu = c(df_test[27,]$Peso, df_test[73,]$Peso, df_test[516,]$Peso, df_test[812,]$Peso, df_test[1111,]$Peso, df_test[1315,]$Peso, df_test[1717,]$Peso, df_test[1899,]$Peso,df_test[2301,]$Peso, df_test[2400,]$Peso)
mse_3_no_out = MSE(v1,mu)
mse_4_2 = MSE(v2,mu)
mse_3_no_out
mse_4_2
modello_6 = update(modello_3_no_out, ~. -Lunghezza -Cranio)
osservazione = data.frame(N.gravidanze=3,Gestazione=39, Sesso="F")
predict(modello_6, osservazione)
ggplot(data = df)+
geom_point(aes(x = Gestazione,
y = Peso,
col = Sesso),position = "jitter")+
geom_smooth(aes(x = Gestazione,
y = Peso,
col = Sesso),se=F,method = "lm")+
labs(title = "Peso Bambini",
x="Giorni Gestazione",
y="Peso Neonati")
# Calcola la media escludendo i valori pari a zero
media_senza_zero <- mean(df$Anni.madre[df$Anni.madre != 0], na.rm = TRUE)
# Sostituisci i valori pari a zero con la media calcolata
df$Anni.madre[df$Anni.madre == 0] <- media_senza_zero
attach(df)
summary(df_selected)
# Calcola la media escludendo i valori pari a zero
media_senza_zero <- mean(df$Anni.madre[df$Anni.madre != 0], na.rm = TRUE)
# Sostituisci i valori pari a zero con la media calcolata
df$Anni.madre[df$Anni.madre == 0] <- media_senza_zero
attach(df)
summary(select(df, -Fumatrici, -Tipo.parto, -Ospedale))
# Calcola la media escludendo i valori inferiori a 12
media_validi <- mean(df$Anni.madre[df$Anni.madre >= 12], na.rm = TRUE)
# Sostituisci i valori inferiori a 12 con la media calcolata
df$Anni.madre[df$Anni.madre < 12] <- media_validi
attach(df)
summary(select(df, -Fumatrici, -Tipo.parto, -Ospedale))
table(Fumatrici)
table(Tipo.parto)
table(Ospedale)
table(Fumatrici)
table(Tipo.parto)
table(Ospedale)
table(Fumatrici)
table(Tipo.parto)
table(Ospedale)
table(Fumatrici)[103]
max(table(Fumatrici))
table(Fumatrici)
ggplot(data = df)+
geom_bar(
aes(x= as.factor(Fumatrici)),
stat = "count",
fill = "lightblue",
color = "black")+
labs(title = "Fumatrici",
x="Variabile fumatrici",
y="Frequenze assolute")+
theme(plot.title = element_text(hjust = 0.5))+
scale_y_continuous(breaks = seq(0,2500,500))
ggplot(data = df)+
geom_bar(
aes(x=Tipo.parto),
stat = "count",
fill = "lightblue",
color = "black")+
labs(title = "Tipo.parto",
x="Variabile Tipo.parto",
y="Frequenze assolute")+
theme(plot.title = element_text(hjust = 0.5))+
scale_y_continuous(breaks = seq(0,2500,500))
ggplot(data = df)+
geom_bar(
aes(x=Ospedale),
stat = "count",
fill = "lightblue",
color = "black")+
labs(title = "Ospedale",
x="Variabile Ospedale",
y="Frequenze assolute")+
theme(plot.title = element_text(hjust = 0.5))+
scale_y_continuous(breaks = seq(0,2500,500))
ggplot(data = df)+
geom_bar(
aes(x=Sesso),
stat = "count",
fill = "lightblue",
color = "black")+
labs(title = "Sesso",
x="Variabile Sesso",
y="Frequenze assolute")+
theme(plot.title = element_text(hjust = 0.5))+
scale_y_continuous(breaks = seq(0,2500,250))
options(warn = -1)
#install.packages("ggplot2")
#install.packages("ineq")
#install.packages("car")
#install.packages("MASS")
#install.packages("lmtest")
#install.packages("dplyr")
#tinytex::install_tinytex()
library(ggplot2)
library(ineq)
library(car)
library("MASS")
library(lmtest)
library(dplyr)
df = read.csv("neonati.csv")
any(is.na(df))
df_selected <- select(df, -Fumatrici, -Tipo.parto, -Ospedale)
summary(df_selected)
# Calcola la media escludendo i valori inferiori a 12
media_validi <- mean(df$Anni.madre[df$Anni.madre >= 12], na.rm = TRUE)
# Sostituisci i valori inferiori a 12 con la media calcolata
df$Anni.madre[df$Anni.madre < 12] <- media_validi
attach(df)
table(Fumatrici)
table(Tipo.parto)
table(Ospedale)
par(mfrow = c(2,3))
boxplot(Anni.madre, main = "Anni delle madri", col="lightblue")
boxplot(N.gravidanze, main = "Numero gravidanze", col="lightblue")
boxplot(Gestazione, ylab = "Anni", main = "Settimane di gestazione", col="lightblue")
boxplot(Lunghezza, main = "Lunghezza del neonato", col="lightblue")
boxplot(Cranio, main = "Diametro del cranio", col="lightblue")
ggplot(data = df)+
geom_bar(
aes(x= as.factor(Fumatrici)),
stat = "count",
fill = "lightblue",
color = "black")+
labs(title = "Fumatrici",
x="Variabile fumatrici",
y="Frequenze assolute")+
theme(plot.title = element_text(hjust = 0.5))+
scale_y_continuous(breaks = seq(0,2500,500))
ggplot(data = df)+
geom_bar(
aes(x=Tipo.parto),
stat = "count",
fill = "lightblue",
color = "black")+
labs(title = "Tipo.parto",
x="Variabile Tipo.parto",
y="Frequenze assolute")+
theme(plot.title = element_text(hjust = 0.5))+
scale_y_continuous(breaks = seq(0,2500,500))
ggplot(data = df)+
geom_bar(
aes(x=Ospedale),
stat = "count",
fill = "lightblue",
color = "black")+
labs(title = "Ospedale",
x="Variabile Ospedale",
y="Frequenze assolute")+
theme(plot.title = element_text(hjust = 0.5))+
scale_y_continuous(breaks = seq(0,2500,500))
ggplot(data = df)+
geom_bar(
aes(x=Sesso),
stat = "count",
fill = "lightblue",
color = "black")+
labs(title = "Sesso",
x="Variabile Sesso",
y="Frequenze assolute")+
theme(plot.title = element_text(hjust = 0.5))+
scale_y_continuous(breaks = seq(0,2500,250))
source("Utils.R")
indice_gini(Fumatrici)
indice_gini(Tipo.parto)
indice_gini(Ospedale)
indice_gini(Sesso)
boxplot(Peso, main = "Peso del neonato", col="lightblue")
moments::skewness(Peso)
moments::kurtosis(Peso) -3
shapiro.test(Peso)
plot(density(Peso), main = "Distribuzione del Peso", xlab = "Peso", col = "blue")
abline(v = mean(Peso), col = "green")
lines(density(rnorm(100000, mean = mean(Peso), sd = sd(Peso))), col = "brown")
legend("topright", legend = c("Densità Peso", "Media Peso", "Densità Normale"),
col = c("blue", "green", "brown"), lty = 1:1, cex = 0.8)
t.test(Peso, mu=3300, conf.level = 0.95, alternative = "two.sided")
t.test(Lunghezza, mu=500, conf.level = 0.95, alternative = "two.sided")
boxplot(Peso ~ Sesso, col="lightblue")
title(main = "Variabile Peso in funzione del sesso", cex.main = 1.5)
shapiro.test(Peso[Sesso=="M"])
shapiro.test(Peso[Sesso=="F"])
wilcox.test(Peso[Sesso=="M"], Peso[Sesso=="F"])
plot(density(Peso[Sesso=="M"]), main = "Distribuzione in funzione del sesso", xlab = "Peso", ylim = c(0, 12e-4),  col = "blue")
abline(v = mean(Peso[Sesso=="M"]), col = "blue")
lines(density(Peso[Sesso=="F"]), col = "brown")
abline(v = mean(Peso[Sesso=="F"]), col = "brown")
legend("topleft", legend = c("Distribuzione Peso Maschi", "Media Peso Maschi", "Distribuzione Peso Femmine", "Media Peso Femmine"),
col = c("blue", "blue", "brown", "brown"), lty = 1:1, cex = 0.8)
boxplot(Lunghezza ~ Sesso, col="lightblue")
title(main = "Variabile Lunghezza in funzione del sesso", cex.main = 1.5)
shapiro.test(Lunghezza[Sesso=="M"])
shapiro.test(Lunghezza[Sesso=="F"])
wilcox.test(Lunghezza[Sesso=="M"], Lunghezza[Sesso=="F"])
plot(density(Lunghezza[Sesso=="M"]), main = "Distribuzione in funzione del sesso", xlab = "Lunghezza", ylim = c(0, 0.025),  col = "blue")
abline(v = mean(Lunghezza[Sesso=="M"]), col = "blue")
lines(density(Lunghezza[Sesso=="F"]), col = "brown")
abline(v = mean(Lunghezza[Sesso=="F"]), col = "brown")
legend("topleft", legend = c("Distribuzione Lunghezza Maschi", "Media Lunghezza Maschi", "Distribuzione Lunghezza Femmine", "Media Lunghezza Femmine"),
col = c("blue", "blue", "brown", "brown"), lty = 1:1, cex = 0.8)
ggplot(data = df)+
geom_bar(
aes(x=Ospedale, fill = Tipo.parto),
position = "dodge",
sta = "count",
color = "black")+
labs(x="Ospedali",
y="Frequenze assolute")+
theme_bw()+
scale_y_continuous(breaks = seq(0,1500,100))
tab_contingenza = table(Tipo.parto, Ospedale)["Ces", ]
tab_contingenza
chisq.test(tab_contingenza)
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
mapping_numerico = c("Nat" = 1, "Ces" = 2)
df$Tipo.parto = as.numeric(factor(Tipo.parto, levels = names(mapping_numerico), labels = mapping_numerico))
mapping_numerico2 = c("osp1" = 1, "osp2" = 2, "osp3" = 3)
df$Ospedale = as.numeric(factor(Ospedale, levels = names(mapping_numerico2), labels = mapping_numerico2))
mapping_numerico3 = c("M" = 1, "F" = 2)
df["Sesso"] = as.numeric(factor(Sesso, levels = names(mapping_numerico3), labels = mapping_numerico3))
attach(df)
pairs(df, upper.panel = panel.smooth, lower.panel = panel.cor)
par(mfrow = c(1,2))
boxplot(Peso~Fumatrici, xlab = "Relazione peso-fumatrici", col="lightblue")
boxplot(Peso~Tipo.parto, xlab = "Relazione peso-tipo parto", col="lightblue")
wilcox.test(Peso[Fumatrici=="0"], Peso[Fumatrici=="1"], mu=0)
wilcox.test(Peso[Tipo.parto=="1"], Peso[Tipo.parto=="2"], mu=0)
df = read.csv("neonati.csv")
df = df[-27,]
df = df[-73,]
df = df[-516,]
df = df[-812,]
df = df[-1111,]
df = df[-1315,]
df = df[-1717,]
df = df[-1899,]
df = df[-2301,]
df = df[-2400,]
attach(df)
modello_1 = lm(Peso ~ ., data=df)
summary(modello_1)
vif(modello_1)
modello_2 = lm(Peso ~ . -Anni.madre -Fumatrici -Ospedale, data=df)
summary(modello_2)
BIC(modello_1, modello_2)
anova(modello_1, modello_2)
modello_3 = update(modello_2, ~. -Tipo.parto)
summary(modello_3)
anova(modello_2, modello_3)
BIC(modello_2, modello_3)
n = nrow(df)
step_wiseAIC = MASS::stepAIC(modello_1, direction = "both", k=log(n))
summary(step_wiseAIC)
BIC(step_wiseAIC, modello_3)
modello_4_1 = update(modello_3, ~. + I(Gestazione^2))
modello_4_2 = update(modello_3, ~. + I(Lunghezza^2))
modello_4_3 = update(modello_3, ~. + I(Cranio^2))
modello_4_4 = update(modello_3, ~. + I(N.gravidanze^2))
BIC(modello_4_1)
BIC(modello_4_2)
BIC(modello_4_3)
BIC(modello_4_4)
modello_5_1 = update(modello_3, ~. + Gestazione*Cranio )
modello_5_2 = update(modello_3, ~. + Lunghezza*Gestazione )
modello_5_3 = update(modello_3, ~. + Lunghezza*Cranio )
BIC(modello_5_1)
BIC(modello_5_2)
BIC(modello_5_3)
par(mfrow=c(2,2))
plot(modello_3)
#distanza di cook
cook<-cooks.distance(modello_3)
max(cook)
which.max(cook)
plot(cook,ylim = c(0,1))
df_no_out = df[-1551,]
modello_3_no_out = lm(Peso ~ . -Anni.madre -Fumatrici -Ospedale -Tipo.parto, data=df_no_out)
shapiro.test(residuals(modello_3_no_out))
bptest(modello_3_no_out)
dwtest(modello_3_no_out)
plot(density(residuals(modello_3_no_out)), main="Densità residui modello_3_no_out")
plot(residuals(modello_3_no_out))
title(main = "Residui modello_3_no_out", cex.main = 1.5)
par(mfrow=c(2,2))
plot(modello_4_2)
#distanza di cook
cook<-cooks.distance(modello_4_2)
max(cook)
which.max(cook)
plot(cook,ylim = c(0,1))
shapiro.test(residuals(modello_4_2))
bptest(modello_4_2)
dwtest(modello_4_2)
plot(density(residuals(modello_4_2)), main="Densità residui modello_4_2")
plot(residuals(modello_4_2))
title(main="Residui modello_4_2")
summary(modello_3_no_out)$r.squared
summary(modello_4_2)$r.squared
BIC(modello_3_no_out)
BIC(modello_4_2)
df_test = read.csv("neonati.csv")
p31 = predict(modello_3_no_out, df_test[27,])
p41 = predict(modello_4_2, df_test[27,])
p32 = predict(modello_3_no_out, df_test[73,])
p42 = predict(modello_4_2, df_test[73,])
p33 = predict(modello_3_no_out, df_test[516,])
p43 = predict(modello_4_2, df_test[516,])
p34 = predict(modello_3_no_out, df_test[812,])
p44 = predict(modello_4_2, df_test[812,])
p35 = predict(modello_3_no_out, df_test[1111,])
p45 = predict(modello_4_2, df_test[1111,])
p36 = predict(modello_3_no_out, df_test[1315,])
p46 = predict(modello_4_2, df_test[1315,])
p37 = predict(modello_3_no_out, df_test[1717,])
p47 = predict(modello_4_2, df_test[1717,])
p38 = predict(modello_3_no_out, df_test[1899,])
p48 = predict(modello_4_2, df_test[1899,])
p39 = predict(modello_3_no_out, df_test[2301,])
p49 = predict(modello_4_2, df_test[2301,])
p310 = predict(modello_3_no_out, df_test[2400,])
p410 = predict(modello_4_2, df_test[2400,])
v1 = c(p31, p32, p33, p34, p35, p36, p37, p38, p39, p310)
v2 = c(p41, p42, p43, p44, p45, p46, p47, p48, p49, p410)
mu = c(df_test[27,]$Peso, df_test[73,]$Peso, df_test[516,]$Peso, df_test[812,]$Peso, df_test[1111,]$Peso, df_test[1315,]$Peso, df_test[1717,]$Peso, df_test[1899,]$Peso,df_test[2301,]$Peso, df_test[2400,]$Peso)
mse_3_no_out = MSE(v1,mu)
mse_4_2 = MSE(v2,mu)
mse_3_no_out
mse_4_2
modello_6 = update(modello_3_no_out, ~. -Lunghezza -Cranio)
osservazione = data.frame(N.gravidanze=3,Gestazione=39, Sesso="F")
predict(modello_6, osservazione)
ggplot(data = df)+
geom_point(aes(x = Gestazione,
y = Peso,
col = Sesso),position = "jitter")+
geom_smooth(aes(x = Gestazione,
y = Peso,
col = Sesso),se=F,method = "lm")+
labs(title = "Peso Bambini",
x="Giorni Gestazione",
y="Peso Neonati")
